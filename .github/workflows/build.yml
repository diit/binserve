name: Build and Push

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    name: Build and Test Multi-Arch Images
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write  # Required for attestations
      attestations: write  # Required for attestations
    outputs:
      astro_version: ${{ steps.version.outputs.astro_version }}
      binserve_version: ${{ steps.version.outputs.binserve_version }}
      image_tag: ${{ steps.version.outputs.image_tag }}
      image_digest: ${{ steps.build_push.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract versions from Earthfile
        id: version
        run: |
          ASTRO_VERSION=$(grep 'ARG --global ASTRO_VERSION=' Earthfile | cut -d'=' -f2)
          BINSERVE_VERSION=$(grep 'ARG --global BINSERVE_VERSION=' Earthfile | cut -d'=' -f2)
          IMAGE_TAG="astro-v${ASTRO_VERSION}"
          echo "astro_version=${ASTRO_VERSION}" >> $GITHUB_OUTPUT
          echo "binserve_version=${BINSERVE_VERSION}" >> $GITHUB_OUTPUT
          echo "image_tag=${IMAGE_TAG}" >> $GITHUB_OUTPUT
          echo "Astro Version: ${ASTRO_VERSION}"
          echo "Binserve Version: ${BINSERVE_VERSION}"
          echo "Image Tag: ${IMAGE_TAG}"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up Earthly
        uses: earthly/actions-setup@v1
        with:
          version: latest

      - name: Configure Earthly with remote caching
        run: |
          mkdir -p ~/.earthly
          cat << 'EOF' > ~/.earthly/config.yml
          global:
            cache_size_mb: 10000
            buildkit_cache_size_mb: 10000
            buildkit_additional_config: |
              [registry."${{ env.REGISTRY }}"]
                insecure = false
          EOF

      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up crane
        if: github.event_name != 'pull_request'
        uses: imjasonh/setup-crane@v0.4

      - name: Build images locally (PR)
        if: github.event_name == 'pull_request'
        run: earthly --ci +astro-all-platforms

      - name: Build and push images (main)
        id: build_push
        if: github.event_name != 'pull_request'
        run: |
          earthly --ci --push +astro-all-platforms
          # Extract manifest list digest for attestation
          DIGEST=$(crane digest ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.image_tag }})
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          echo "Manifest digest: ${DIGEST}"

      - name: Generate SBOM
        if: github.event_name != 'pull_request'
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.image_tag }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Generate build provenance attestation
        if: github.event_name != 'pull_request'
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build_push.outputs.digest }}
          push-to-registry: true

      - name: Upload SBOM as artifact
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: sbom.spdx.json
          retention-days: 90

  security-scan:
    name: Security Scan with Trivy
    runs-on: ubuntu-latest
    needs: build-and-test
    # Only run security scan on main branch where image is pushed to registry
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image_tag }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
          # Don't fail here to allow SARIF upload even if vulnerabilities found
          exit-code: '0'

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy vulnerability scanner (enforce policy)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image_tag }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          # CRITICAL FIX: Fail pipeline if CRITICAL or HIGH vulnerabilities found
          exit-code: '1'
          # Also scan for misconfigurations
          scanners: 'vuln,config,secret'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if release exists
        id: check_release
        run: |
          TAG="${{ needs.build-and-test.outputs.image_tag }}"
          # Fetch all tags to ensure we have complete tag history
          git fetch --tags --force 2>/dev/null || true
          
          # Check if tag exists (handle case where no tags exist yet)
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag $TAG already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag $TAG does not exist, will create"
          fi

      - name: Create and push tag
        if: steps.check_release.outputs.exists == 'false'
        run: |
          TAG="${{ needs.build-and-test.outputs.image_tag }}"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$TAG" -m "Release $TAG"
          git push origin "$TAG"

      - name: Download SBOM artifact
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/download-artifact@v5
        with:
          name: sbom

      - name: Create GitHub Release
        if: steps.check_release.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build-and-test.outputs.image_tag }}
          name: Astro ${{ needs.build-and-test.outputs.astro_version }}
          body: |
            ## Binserve for Astro v${{ needs.build-and-test.outputs.astro_version }}
            
            ### Docker Images
            Pull the multi-architecture image:
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image_tag }}
            ```
            
            ### Versions
            - **Astro**: ${{ needs.build-and-test.outputs.astro_version }}
            - **Binserve**: ${{ needs.build-and-test.outputs.binserve_version }}
            
            ### Multi-Architecture Support
            - ✅ linux/amd64 (x86_64)
            - ✅ linux/arm64 (aarch64)
            
            ### Security
            - ✅ Vulnerability scanned with Trivy
            - ✅ SBOM (Software Bill of Materials) included
            - ✅ Build provenance attestation available
            - ✅ Distroless base image (minimal attack surface)
            - ✅ Runs as non-root user (UID 65532)
            
            ### Usage
            ```dockerfile
            FROM ${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image_tag }}
            COPY ./dist /app/public/
            ```
            
            ### Verify Image Provenance
            ```bash
            gh attestation verify oci://${{ env.REGISTRY }}/${{ github.repository }}:${{ needs.build-and-test.outputs.image_tag }} -o diit
            ```
          draft: false
          prerelease: false
          files: |
            sbom.spdx.json
